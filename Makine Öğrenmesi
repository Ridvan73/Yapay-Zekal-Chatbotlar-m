Makine öğrenmesi, bilgisayarların verilerden öğrenmesini ve kendilerini geliştirmesini sağlayan yapay zekanın bir dalıdır. Makine öğrenmesi, verilerdeki kalıpları ve ilişkileri bulmak için matematiksel modeller kullanır. Bu modeller, verilere dayalı olarak en iyi kararları ve tahminleri yapabilir. Makine öğrenmesi, veri ve deneyim arttıkça daha doğru ve akıllı hale gelir.
Makine öğrenmesi, farklı öğrenme türlerine göre sınıflandırılabilir. Bunlar:
- Denetimli öğrenme: Bu öğrenme türünde, bilgisayar, giriş ve çıkış verileri arasındaki ilişkiyi öğrenmek için etiketli veriler kullanır. Örneğin, bir resimdeki nesneleri tanımlamak için, resimler ve nesnelerin isimleri eğitim verisi olarak verilir. Bilgisayar, bu verilerden bir model oluşturur ve yeni resimlerde nesneleri tanımlayabilir. Denetimli öğrenme, sınıflandırma, regresyon, zaman serisi analizi gibi problemler için kullanılır.
- Denetimsiz öğrenme: Bu öğrenme türünde, bilgisayar, giriş verilerindeki yapıyı veya grupları bulmak için etiketsiz veriler kullanır. Örneğin, bir metindeki kelimeleri anlamak için, metin verisi verilir. Bilgisayar, bu veriden bir model oluşturur ve kelimelerin anlamlarını veya benzerliklerini bulabilir. Denetimsiz öğrenme, kümeleme, boyut indirgeme, öneri sistemleri gibi problemler için kullanılır.
- Pekiştirmeli öğrenme: Bu öğrenme türünde, bilgisayar, bir ortamda belirli bir hedefe ulaşmak için eylemler seçer. Örneğin, bir oyunu oynamak için, oyunun kuralları ve durumu verilir. Bilgisayar, bu durumdan bir eylem seçer ve sonucunda bir ödül veya ceza alır. Bilgisayar, bu geri bildirimlerden bir model oluşturur ve en yüksek ödülü alacak eylemleri bulabilir. Pekiştirmeli öğrenme, kontrol, optimizasyon, robotik, yapay zeka gibi problemler için kullanılır.
Makine öğrenmesi, birçok alanda uygulanabilir ve faydalıdır. Örneğin, makine öğrenmesi, sağlık, eğitim, finans, güvenlik, eğlence, sanat, tarım gibi alanlarda veri analizi, tahmin, tanıma, sınıflandırma, öneri, üretim gibi görevler için kullanılabilir.
Giriş katmanı
Giriş katmanı, bir yapay zekâ ağının ilk katmanıdır. Bu katman, ağın öğreneceği verileri alır ve ağın anlayabileceği bir formata dönüştürür. Örneğin, bir resim tanıma ağında, giriş katmanı resmi piksel değerleri olarak alır ve bunları bir vektör veya matris olarak ağa iletir. Bir metin işleme ağında, giriş katmanı metni kelime veya harf seviyesinde kodlar ve bunları bir vektör veya matris olarak ağa iletir.
Giriş katmanının amacı, verileri standartlaştırmak ve ağın öğrenmesini kolaylaştırmaktır. Bu nedenle, giriş katmanı verileri ön işleme, normalleştirme, ölçekleme, dönüştürme gibi işlemlerden geçirebilir. Örneğin, bir resim tanıma ağında, giriş katmanı resimleri aynı boyuta getirebilir, renkleri ayarlayabilir, kontrastı artırabilir veya azaltabilir, döndürebilir veya yansıtabilir. Bir metin işleme ağında, giriş katmanı metni küçük harfe çevirebilir, noktalama işaretlerini kaldırabilir, duraklama kelimelerini atlayabilir, kelime köklerini bulabilir veya kelime gömme kullanabilir.
Normalize edilmiş veri, bir veri kümesinin değerlerini belirli bir aralığa veya ölçeğe göre ayarlamak için kullanılan bir yöntemdir. Normalizasyon, verilerin karşılaştırılabilirliğini ve analizini kolaylaştırmak için yapılır. Normalizasyonun birçok farklı yöntemi vardır, ancak en yaygın olanları şunlardır:
Min-Max Normalizasyonu: Bu yöntem, verilerin en küçük değerini 0, en büyük değerini 1 olarak alır ve diğer değerleri buna göre ölçeklendirir. Bu yöntemin denklemi şöyledir:
![20240322_094548.jpeg](https://github.com/Ridvan73/Yapay-Zekal-Chatbotlar-m/assets/148940904/7c68012a-47f3-4463-8c59-18d42c4041dc)

Burada, Xnorm normalize edilmiş değer, x orijinal değer, Xmin veri kümesinin en küçük değeri, xmax veri kümesinin en büyük değeridir.
Z-Skor Normalizasyonu: Bu yöntem, verilerin ortalamasını 0, standart sapmasını 1 olarak alır ve diğer değerleri buna göre ölçeklendirir. Bu yöntemin denklemi şöyledir:
![20240322_094629.jpeg](https://github.com/Ridvan73/Yapay-Zekal-Chatbotlar-m/assets/148940904/5a87b5a4-ea28-4e4d-baa5-e50ec6625c1c)

Burada, Xnorm normalize edilmiş değer, x orijinal değer, μ veri kümesinin ortalaması,  σ veri kümesinin standart sapmasıdır.
Konvolüsyon katmanı
Konvolüsyon katmanı, derin öğrenme mimarilerinin temel bileşenlerinden biridir. Konvolüsyon katmanı, giriş verileri üzerinde belirli özellikleri yakalamak için filtre adı verilen küçük matrisler kullanır. Filtreler, giriş verileri ile çarpılarak aktivasyon adı verilen bir değer üretir. Aynı filtrenin giriş verilerinin farklı bölgelerine uygulanması, aktivasyon haritası adı verilen bir matris oluşturur. Aktivasyon haritası, filtrenin giriş verilerinde hangi bölgelerde ve ne kadar güçlü bir şekilde eşleştiğini gösterir.
Konvolüsyon katmanının avantajlarından biri, filtrelerin veriye özgü olarak öğrenilebilmesidir. Bu sayede, konvolüsyon katmanı, giriş verilerindeki önemli özellikleri otomatik olarak belirleyebilir. Örneğin, bir görüntü sınıflandırma problemi için, konvolüsyon katmanı, kenar, renk, doku gibi görüntü özelliklerini öğrenebilir.
Konvolüsyon katmanının parametreleri, filtrelerin sayısı, boyutu, içeriği ve giriş verileri üzerinde nasıl hareket ettikleridir. Bu parametreler, uygulanan probleme ve kullanılan mimariye göre değişebilir. Filtrelerin sayısı, aktivasyon haritalarının sayısını belirler. Filtrelerin boyutu, giriş verilerinin ne kadar büyük bir bölgesini kapsadığını belirler. Filtrelerin içeriği, öğrenilen özellikleri belirler. Filtrelerin giriş verileri üzerinde nasıl hareket ettikleri, adım boyu (stride) ve dolgu (padding) olarak adlandırılan iki parametre ile kontrol edilir. Adım boyu, filtrenin giriş verileri üzerinde kaç birim kaydırıldığını belirler. Dolgu, giriş verilerinin etrafına eklenen sıfır değerli piksellerin sayısını belirler. Bu parametreler, aktivasyon haritalarının boyutunu etkiler.
Konvolüsyon katmanı, giriş verilerinin boyutuna ve yapısına göre farklı tiplerde olabilir. Örneğin, tek boyutlu konvolüsyon katmanı, ses gibi zamana bağlı veriler için kullanılabilir. İki boyutlu konvolüsyon katmanı, görüntü gibi iki boyutlu veriler için kullanılabilir. Üç boyutlu konvolüsyon katmanı, video gibi üç boyutlu veriler için kullanılabilir. Ayrıca, konvolüsyon katmanının performansını ve verimliliğini artırmak için farklı varyasyonlar da mevcuttur. Örneğin, genişletilmiş (dilated) konvolüsyon katmanı, filtrenin giriş verileri üzerinde daha geniş bir alana yayılmasını sağlar. Ayrılabilir (separable) konvolüsyon katmanı, filtrenin derinlik ve uzaysal olarak ayrılmasını sağlar. Ters (transposed) konvolüsyon katmanı, giriş verilerini büyütmek için kullanılır.
Konvolüsyon katmanının başarısı, kullanılan filtrelere bağlıdır. Filtrelerin boyutu ve sayısı, ağın karmaşıklığını ve eğitim süresini etkiler. Filtrelerin içeriği, ağın öğrendiği özellikleri etkiler. Filtrelerin çok büyük veya çok küçük olması, ağın performansını düşürebilir. Filtrelerin çok fazla veya çok az olması, ağın ezberlemesine veya yetersiz kalmasına neden olabilir. Filtrelerin uygun değerlerden oluşması, ağın hata oranını azaltabilir. Bu nedenle, filtrelere uygun değerler atamak veya öğrenmek, konvolüsyon katmanının etkinliği için önemlidir.
Aktivasyon katmanı
Aktivasyon katmanı, bir yapay sinir ağındaki nöronların çıktılarını değiştiren bir katmandır. Bu katman, nöronların belirli bir eşiği geçip geçmediğini veya ne kadar aktif olduklarını belirlemek için kullanılır. Aktivasyon katmanı, ağın doğrusal olmayan özellikleri öğrenmesine ve karmaşık problemleri çözmesine yardımcı olur. Aktivasyon katmanı, farklı aktivasyon fonksiyonları kullanabilir. Bunlardan bazıları şunlardır:
ReLu: ReLu fonksiyonu, girdisi sıfırdan büyükse girdiyi, sıfırdan küçükse sıfırı döndürür. Bu fonksiyon, basit ve hızlı olması, ağın öğrenme hızını artırması ve ölü nöron sorununu azaltması nedeniyle yaygın olarak kullanılır. ReLu fonksiyonunun matematiksel ifadesi şöyledir:
![20240322_094726.jpeg](https://github.com/Ridvan73/Yapay-Zekal-Chatbotlar-m/assets/148940904/80edab36-905c-4f58-8116-f1bbe7ef2621)

Sigmoid: Sigmoid fonksiyonu, girdiyi 0 ile 1 arasında bir değere dönüştürür. Bu fonksiyon, ikili sınıflandırma problemlerinde veya olasılık hesaplamalarında kullanışlıdır. Sigmoid fonksiyonunun dezavantajları, yüksek veya düşük girdilerde türevinin sıfıra yaklaşması ve gradyan kaybolması sorununa yol açmasıdır. Sigmoid fonksiyonunun matematiksel ifadesi şöyledir:
![20240322_094750.jpeg](https://github.com/Ridvan73/Yapay-Zekal-Chatbotlar-m/assets/148940904/71b51ecf-97f0-46ea-ba16-d0661bc5c24d)

Adım: Adım fonksiyonu, girdisi sıfırdan büyükse 1, sıfırdan küçük veya eşitse 0 döndürür. Bu fonksiyon, basit ve keskin bir karar vermek için kullanılabilir. Adım fonksiyonunun dezavantajı, türevinin sıfır olması ve ağın öğrenmesini engellemesidir. Adım fonksiyonunun matematiksel ifadesi şöyledir:
![20240322_094821.jpeg](https://github.com/Ridvan73/Yapay-Zekal-Chatbotlar-m/assets/148940904/a9edc87f-1e20-4090-8ccf-c15237853799)

Aktivasyon katmanı, genellikle konvolüsyon katmanından sonra gelir. Konvolüsyon katmanı, bir görüntü üzerinde filtreler uygulayarak görüntünün özelliklerini çıkarmaya yarayan bir katmandır. Konvolüsyon katmanının çıktısı, aktivasyon katmanına girdi olarak verilir. Aktivasyon katmanı, konvolüsyon katmanının çıktısını değiştirerek, ağın daha iyi öğrenmesini sağlar. Aktivasyon katmanı, konvolüsyon katmanından sonra gelmek zorunda değildir. Tasarımcı, aktivasyon katmanını farklı katmanlardan sonra da uygulayabilir. Bu, ağın performansını ve davranışını etkileyebilir.
Havuzlama katmanı
Havuzlama katmanı, yapay sinir ağlarında kullanılan bir katmandır. Bu katman, aktivasyon katmanından çıkan verileri daha az sayıda nörona indirgemek için kullanılır. Böylece, ağın hesaplama yükü azalır, aşırı uyum (overfitting) önlenir ve özniteliklerin soyutlanması sağlanır.
Havuzlama katmanı, belirli bir boyuttaki bir pencereyi aktivasyon haritası üzerinde kaydırarak, her pencere için bir çıktı değeri üretir. Bu çıktı değeri, havuzlama fonksiyonuna göre belirlenir. Havuzlama fonksiyonu, penceredeki verilerin bir özetini veren bir işlevdir.
Literatürde birçok havuzlama fonksiyonu vardır, ancak en yaygın kullanılanlar şunlardır:
- En büyük (max pooling) değer fonksiyonu: Bu fonksiyon, penceredeki verilerin en büyük değerini alır. Bu fonksiyon, verilerin en belirgin özniteliklerini korurken, gürültüyü ve küçük değişiklikleri filtrelemeye yardımcı olur.
- En küçük (min pooling) değer fonksiyonu: Bu fonksiyon, penceredeki verilerin en küçük değerini alır. Bu fonksiyon, verilerin en az belirgin özniteliklerini korurken, zıtlıkları ve kenarları vurgulamaya yardımcı olur.
- Ortalama (average pooling) değer fonksiyonu: Bu fonksiyon, penceredeki verilerin ortalamasını alır. Bu fonksiyon, verilerin genel eğilimini korurken, ayrıntıları ve farklılıkları yumuşatmaya yardımcı olur.
Havuzlama katmanı, verileri küçültürken, bazı bilgilerin kaybolmasına neden olabilir. Bu nedenle, havuzlama katmanının boyutu, adımı ve fonksiyonu, veri kaybının makul düzeyde olmasını sağlayacak şekilde seçilmelidir.
Ezberleme (Dropout) katmanı
Ezberleme katmanı, yapay zekâ algoritmalarında aşırı uyum (overfitting) sorununu önlemek için kullanılan bir yöntemdir. Aşırı uyum, bir ağın eğitim verilerini çok iyi öğrenmesi ancak yeni verilere genelleştirememesi durumudur. Ezberleme katmanı, eğitim sırasında giriş birimlerinin belirli bir yüzdesini rastgele sıfıra eşitler. Böylece ağ, verilerin tüm özelliklerine bağımlı kalmaz ve daha esnek hale gelir. Ezberleme katmanı, giriş birimlerini sıfırladığı için, geriye kalan birimlerin değerlerini 1 / (1 - oran) ile çarparak toplam girdinin değişmemesini sağlar. Ezberleme katmanı, sadece eğitim modunda çalışır. Çıkarım (inference) modunda, ağın tüm birimleri aktiftir ve herhangi bir değer sıfırlanmaz.
Ezberleme katmanı, derin öğrenme modellerinde de yaygın olarak kullanılır. Özellikle, evrişimli sinir ağlarında (CNN), ezberleme katmanı, havuzlama (pooling) katmanından sonra ve tam bağlantılı (fully connected) katmandan önce yer alır. Havuzlama katmanı, ağın girdi boyutunu azaltarak hesaplama maliyetini düşürür ve özellikleri yoğunlaştırır. Tam bağlantılı katman, ağın son katmanıdır ve çıktı sınıflarını belirler. Ezberleme katmanı, bu iki katman arasında, ağın aşırı uyumunu azaltmak ve genelleştirme performansını artırmak için kullanılır.
Ezberleme katmanı, ayrıca ağın giriş parametrelerinin çıkışa etkisini dengeler. Bazı durumlarda, bazı giriş parametreleri, diğerlerinden çok daha fazla ağın çıkışını belirler. Bu, ağın girişteki küçük değişimlere duyarsız olmasına ve çıkışı sadece güçlü parametrelerin şekillendirmesine neden olur. Ezberleme katmanı, güçlü parametreleri rastgele sıfırlayarak, zayıf parametrelerin de çıkışa katkıda bulunmasını sağlar. Böylece, ağın giriş parametrelerinin çıkışa etkisi daha dengeli hale gelir.
 Tam bağlantı (FullConnected, FC) katmanı
Tam bağlantı katmanı, bir yapay sinir ağındaki nöronların bir önceki katmandaki tüm nöronlara bağlı olduğu bir katmandır. Tam bağlantı katmanı, ağın öğrendiği özellikleri kullanarak sonuç üretmek için kullanılır. Örneğin, bir görüntü sınıflandırma problemi için, tam bağlantı katmanı, görüntünün hangi kategoriye ait olduğunu belirlemek için kullanılabilir.
Tam bağlantı katmanı, genellikle havuzlama veya ezberleme katmanından sonra gelir. Havuzlama katmanı, girdi verisinin boyutunu azaltmak ve ağın ölçek değişikliklerine karşı dayanıklı olmasını sağlamak için kullanılır. Ezberleme katmanı, ağın aşırı öğrenmesini önlemek ve genelleme yeteneğini artırmak için kullanılır. Bu katmanlar, ağın öğrendiği özellikleri korurken, tam bağlantı katmanına giren veri miktarını azaltır.
Tam bağlantı katmanına gelen veriler, tek boyutlu bir vektöre dönüştürülür. Bu, ağın çıktı katmanına bağlanmasını kolaylaştırır. Çıktı katmanı, ağın son tahminlerini üretir. Örneğin, bir görüntü sınıflandırma problemi için, çıktı katmanı, görüntünün her bir kategoriye ait olma olasılığını gösteren bir vektör üretir. Bu vektör, sınıflandırma katmanı olarak da adlandırılabilir.
Sınıflandırma (Classification) katmanı
Sınıflandırma katmanı, bir yapay sinir ağının en sonunda bulunan ve girdi verilerini belirli kategorilere ayıran katmandır. Bu katman, ağın öğrenme amacına göre farklı şekillerde tasarlanabilir. Örneğin, bir ağın el yazısı rakamları tanıması gerekiyorsa, sınıflandırma katmanı 0'dan 9'a kadar 10 farklı sınıf çıkışı üretebilir. Bu sınıflardan hangisinin en yüksek değere sahip olduğu, ağın tahmin ettiği rakamı gösterir.
Sınıflandırma katmanı, kendisinden önce gelen tam bağlantı katmanından aldığı verileri kullanarak bu sınıflandırmayı yapar. Tam bağlantı katmanı, ağın daha önceki katmanlarında elde edilen öznitelikleri birleştirerek, sınıflandırma için gerekli bilgileri içeren bir vektör oluşturur. Bu vektör, sınıflandırma katmanına girdi olarak verilir.
Sınıflandırma katmanı, ağın çıkışında ürettiği sonucun ne olduğuna bağlı olarak farklı fonksiyonlar kullanabilir. Eğer ağın çıkışı bir sınıf etiketi ise, sınıflandırma fonksiyonu olarak Softmax, Sigmoid, ReLU gibi fonksiyonlar kullanılabilir. Bu fonksiyonlar, girdi vektörünün her bir elemanını 0 ile 1 arasında bir değere dönüştürerek, olasılık dağılımı elde eder. Bu dağılımdan en yüksek olasılığa sahip olan eleman, ağın tahmin ettiği sınıfı belirler.
Eğer ağın çıkışı bir sayısal değer ise, sınıflandırma fonksiyonu olarak doğrusal regresyon, polinom regresyon, lojistik regresyon gibi fonksiyonlar kullanılabilir. Bu fonksiyonlar, girdi vektörünün bir fonksiyonu olarak bir sayısal değer üretir. Bu değer, ağın tahmin ettiği sonucu gösterir.
Bazı durumlarda, sınıflandırma katmanı, ağın kendisinden önceki katmanlarında elde edilen öznitelikleri doğrudan kullanmayabilir. Bunun yerine, bu öznitelikleri başka bir sınıflandırma algoritmasına girdi olarak verebilir. Örneğin, destek vektör makineleri, karar ağaçları, k-en yakın komşu gibi algoritmalar, sınıflandırma katmanı olarak kullanılabilir. Bu algoritmalar, ağın öğrendiği özniteliklere göre daha iyi performans gösterebilir.